import { ApiPropertyOptional } from '@nestjs/swagger';
import type Stripe from 'stripe';
import { DiscountDto } from './shared.dto';

export class FromQuoteDto {
  @ApiPropertyOptional({
    description: 'Whether this quote is a revision of the previous quote.',
  })
  isRevision?: boolean;

  @ApiPropertyOptional({
    description: 'The `id` of the quote that will be cloned.',
  })
  quote: string;
}

export class InvoiceSettingsDto {
  @ApiPropertyOptional({
    description:
      'Number of days within which a customer must pay the invoice generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.',
  })
  daysUntilDue?: number;
}

export class SaveQuotRecurringDto {
  @ApiPropertyOptional({
    enum: ['day', 'month', 'week', 'year'],
  })
  interval: 'day' | 'month' | 'week' | 'year';

  @ApiPropertyOptional()
  intervalCount?: number;
}

export class SaveQuotPriceDataDto {
  @ApiPropertyOptional()
  currency: string;

  @ApiPropertyOptional()
  product: string;

  @ApiPropertyOptional()
  recurring?: SaveQuotRecurringDto;

  @ApiPropertyOptional({
    description:
      'Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.',
    enum: ['exclusive', 'inclusive', 'unspecified'],
  })
  taxBehavior?: 'exclusive' | 'inclusive' | 'unspecified';

  @ApiPropertyOptional()
  unitAmount?: number;

  @ApiPropertyOptional()
  unitAmountDecimal?: string;
}

export class SaveQuotLineItemDto {
  @ApiPropertyOptional({
    description:
      'The ID of the price object. One of `price` or `price_data` is required.',
  })
  price?: string;

  @ApiPropertyOptional({
    description:
      ' Data used to generate a new [Price](https://stripe.com/docs/api/prices) object inline. One of `price` or `price_data` is required.',
  })
  priceData?: SaveQuotPriceDataDto;

  @ApiPropertyOptional()
  quantity?: number;

  @ApiPropertyOptional({ isArray: true, type: 'string' })
  taxRates?: Array<string>;
}

export class SaveQuoteSubscriptionData {
  @ApiPropertyOptional({
    description:
      'When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. When updating a subscription, the date of which the subscription will be updated using a subscription schedule. The special value `current_period_end` can be provided to update a subscription at the end of its current period. The `effective_date` is ignored if it is in the past when the quote is accepted.',
  })
  effectiveDate?: 'current_period_end' | number | null;

  @ApiPropertyOptional({
    description:
      'Integer representing the number of trial period days before the customer is charged for the first time.',
  })
  trialPeriodDays?: number | null;
}

export class SaveQuoteTransferDataDto {
  @ApiPropertyOptional()
  amount?: number;

  @ApiPropertyOptional()
  amount_percent?: number;

  @ApiPropertyOptional()
  destination: string;
}

export class SaveQuoteDto {
  @ApiPropertyOptional({
    description:
      "The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. There cannot be any line items with recurring prices when using this field.",
  })
  applicationFeeAmount?: number;

  @ApiPropertyOptional({
    description:
      "A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice subtotal that will be transferred to the application owner's Stripe account. There must be at least 1 line item with a recurring price to use this field.",
  })
  applicationFeePercent?: number;

  @ApiPropertyOptional()
  automaticTaxEnabled?: boolean;

  @ApiPropertyOptional({
    description:
      'Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or at invoice finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions. Defaults to `charge_automatically`.',
    enum: ['charge_automatically', 'send_invoice'],
  })
  collectionMethod?: Stripe.QuoteCreateParams.CollectionMethod;

  @ApiPropertyOptional()
  customer?: string;

  @ApiPropertyOptional({ type: 'string', isArray: true })
  defaultTaxRates?: Array<string>;

  @ApiPropertyOptional()
  description?: string;

  @ApiPropertyOptional({
    isArray: true,
    type: DiscountDto,
  })
  discounts?: Array<DiscountDto>;

  @ApiPropertyOptional()
  expiresAt?: number;

  @ApiPropertyOptional()
  footer?: string;

  @ApiPropertyOptional()
  fromQuote?: FromQuoteDto;

  @ApiPropertyOptional()
  header?: string;

  @ApiPropertyOptional()
  invoiceSettings?: InvoiceSettingsDto;

  @ApiPropertyOptional({ isArray: true, type: SaveQuotLineItemDto })
  lineItems?: Array<SaveQuotLineItemDto>;

  @ApiPropertyOptional()
  metadata?: { [name: string]: string | number | null };

  @ApiPropertyOptional({
    description: 'The account on behalf of which to charge.',
  })
  onBehalfOf?: string;

  @ApiPropertyOptional({
    description:
      'When creating a subscription or subscription schedule, the specified configuration data will be used. There must be at least one line item with a recurring price for a subscription or subscription schedule to be created. A subscription schedule is created if `subscription_data[effective_date]` is present and in the future, otherwise a subscription is created.',
  })
  subscriptionData?: SaveQuoteSubscriptionData;

  @ApiPropertyOptional()
  testClock?: string;

  @ApiPropertyOptional({
    description:
      'The data with which to automatically create a Transfer for each of the invoices.',
  })
  transferData?: SaveQuoteTransferDataDto;
}
